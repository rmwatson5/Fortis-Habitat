@using Sitecore.Feature.Media.Models.Templates
@using Sitecore.Foundation.Dictionary.Extensions
@model Sitecore.Feature.Media.Models.MediaCarouselRenderingModel
@{
    var carouselSlides = string.Empty;
    var carouselNavItems = string.Empty;
    var carouselId = $"carousel_{Model.RenderingItem.ItemID}";
    var index = 0;
    foreach (var slide in Model.Slides)
    {
        var active = index == 0;
        carouselNavItems += RenderListItem(slide, carouselId, index, active);
        carouselSlides += RenderCarouselSlide(slide, active);
        index++;
    }
}
<div class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
        @Html.Raw(carouselNavItems)
    </ol>
    <div class="carousel-inner" role="listbox">
        @Html.Raw(carouselSlides)
    </div>
    <a class="left carousel-control" href="#@carouselId" role="button" data-slide="prev">
        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
        <span class="sr-only">@Html.Sitecore().Dictionary("/media/carousel/previous", "Previous")</span>
    </a>
    <a class="right carousel-control" href="#@carouselId" role="button" data-slide="next">
        <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
        <span class="sr-only">@Html.Sitecore().Dictionary("/media/carousel/next", "Next")</span>
    </a>
</div>

@helper RenderListItem(IHasMedia slide, string slideId, int index, bool active)
{
    var activeClass = active ? "active" : string.Empty;
    <li data-target="#@slideId" data-slide-to="@index" class="@activeClass"></li>
}

@helper RenderCarouselSlide(IHasMedia slide, bool active)
{
    var videoSlide = slide as IHasMediaVideo;
    var activeClass = active ? "active" : string.Empty;

    <div class="item @activeClass">
        <div class="jumbotron bg-media" style="background-image: url('@slide.BackgroundImage.GetSourceUri()');">
            @if (slide is IHasMediaVideo)
            {
                @RenderVideoInfo(videoSlide)
            }    
            <h3>@slide.MediaTitle.Render()</h3>
            <div class="lead">
                @slide.MediaDescription.Render()
            </div>
        </div>
    </div>
}

@helper RenderVideoInfo(IHasMediaVideo videoSlide)
{
    <video autoplay="" loop="" muted="" class="video-bg img-responsive">
        <source src="@videoSlide.MediaVideoLink.RawValue" type="video/mp4">
    </video>
}